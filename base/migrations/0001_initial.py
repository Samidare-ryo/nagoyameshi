# Generated by Django 4.2.23 on 2025-09-15 11:56

import base.models.favorite_models
import base.models.member_models
import base.models.notification_models
import base.models.reservation_models
import base.models.restaurant_models
import base.models.review_models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=base.models.member_models.member_pk, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.CharField(blank=True, max_length=64, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('is_subscribed', models.BooleanField(default=False)),
                ('subscription_expiry', models.DateTimeField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='電話番号')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='住所')),
                ('last_name_kana', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator('^[ァ-ヴー\\s]+$', '全角カタカナで入力してください。')], verbose_name='セイ（全角カナ）')),
                ('first_name_kana', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator('^[ァ-ヴー\\s]+$', '全角カタカナで入力してください。')], verbose_name='メイ（全角カナ）')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='カテゴリ名')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='スラッグ')),
            ],
            options={
                'verbose_name': 'カテゴリ',
                'verbose_name_plural': 'カテゴリ',
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('day_of_week', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='MembershipType',
            fields=[
                ('code', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('monthly_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.CharField(default=base.models.restaurant_models.restaurant_pk, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=50)),
                ('description', models.TextField(blank=True, default='')),
                ('phone_number', models.CharField(blank=True, default='', max_length=15)),
                ('email', models.EmailField(blank=True, default='', max_length=100)),
                ('budget', models.IntegerField(default=0, help_text='1人あたりの平均予算（円）', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='restaurants', to='base.category')),
                ('regular_holiday', models.ManyToManyField(default=0, to='base.holiday')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialHoliday',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('plan', models.CharField(max_length=50)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField()),
                ('active', models.BooleanField(default=True)),
                ('cancelled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_card_last4', models.CharField(blank=True, max_length=4, null=True, verbose_name='カード下4桁')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='タグ名')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='スラッグ')),
            ],
            options={
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.CharField(default=base.models.review_models.review_pk, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('content', models.TextField(verbose_name='レビュー内容')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='評価')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reviews', to='base.restaurant')),
            ],
            options={
                'verbose_name': 'レビュー',
                'verbose_name_plural': 'レビュー',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RestaurantImage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to=base.models.restaurant_models.upload_image_to)),
                ('caption', models.CharField(blank=True, default='', max_length=100)),
                ('image_type', models.CharField(blank=True, choices=[('exterior', '外観'), ('interior', '内装'), ('food', '料理')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='base.restaurant')),
            ],
        ),
        migrations.AddField(
            model_name='restaurant',
            name='special_holiday',
            field=models.ManyToManyField(blank=True, null=True, to='base.specialholiday'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='restaurants', to='base.tag'),
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.CharField(default=base.models.reservation_models.reservation_pk, editable=False, max_length=30, primary_key=True, serialize=False)),
                ('reserved_at', models.DateTimeField()),
                ('number_of_people', models.PositiveIntegerField()),
                ('note', models.TextField(blank=True, null=True)),
                ('is_canceled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('restaurant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.restaurant')),
            ],
            options={
                'verbose_name': '予約',
                'verbose_name_plural': '予約',
                'db_table': 'reservation',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_id', models.CharField(default=base.models.notification_models.notification_pk, max_length=20, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('read', models.BooleanField(default=False)),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.reservation')),
                ('restaurant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.restaurant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='member',
            name='membership_type',
            field=models.ForeignKey(default=base.models.member_models.Member.get_default_membership_type, on_delete=django.db.models.deletion.PROTECT, to='base.membershiptype', verbose_name='会員種別'),
        ),
        migrations.AddField(
            model_name='member',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.CharField(default=base.models.favorite_models.favorite_pk, editable=False, max_length=30, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='base.restaurant')),
            ],
            options={
                'db_table': 'favorite',
                'unique_together': {('member', 'restaurant')},
            },
        ),
    ]
